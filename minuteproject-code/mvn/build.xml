<?xml version="1.0" encoding="UTF-8"?>
<project default="migrate-to-maven" basedir="." name="Migration">
    <description>This build file will migrate to maven minuteKernel modules</description>
    <!-- ===================================================================== -->
    <!-- import files -->
    <!-- ===================================================================== -->
    <property file="build.properties"/>
    <!-- ===================================================================== -->
    <!-- properties definitions -->
    <!-- ===================================================================== -->
    <!-- LOCAL PROPERTIES
    <property name="project.name" value="minuteProject"/>-->
    <property name="home.dir" value="."/>
    <property name="application.dir" value="${home.dir}/application"/>

    <tstamp>
        <format property='build.time' pattern='yyyy-MM-dd HH:mm:ss'/>
    </tstamp>

    <!-- ===================================================================== -->
    <!-- classpath definitions -->
    <!-- ===================================================================== -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${libextra.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${libmongo.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${libcmis.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${deplib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>
    <path id="compile.test.classpath">
        <fileset dir="${libc.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="./config"/>
    </path>
    <path id="compiled.classes">
        <pathelement location="${classes.dir}"/>
    </path>
    <path id="compiled.test.classes">
        <pathelement location="${testclasses.dir}"/>
    </path>

    <target name="migrate-to-maven" depends="clean,copy-java-code,copy-groovy-code,copy-config,copy-resource,copy-velocity-template">
        <title title="TASK archive" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Perform migration tasks</description>
    </target>

    <!-- target clean -->
    <target name="clean">
        <title title="clean" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Clean workspace java code + resources</description>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${mvn.kernel.java}"/>
            <fileset dir="${mvn.kernel.groovy}"/>
            <fileset dir="${mvn.kernel.config}"/>
            <fileset dir="${mvn.kernel.resources}"/>
            <fileset dir="${mvn.kernel.config-demo}"/>
            <fileset dir="${mvn.kernel.config-test}"/>
        </delete>
    </target>

    <target name="copy-java-code">
        <title title="copy-java-code" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy java code mvn project</description>
        <macro_copy_java todir="${mvn.kernel.java}" filesetDir="${leg.kernel.java.src}"/>
        <macro_copy_exclude_java todir="${mvn.kernel.java}" filesetDir="${leg.kernel.java.src-patch}" exclusion="org/sqlite/*.java"/>
        <!-- TODO check
        <macro_copy_java todir="${mvn.kernel.java}" filesetDir="${leg.kernel.java.src-patch2" />
        -->
        <macro_copy_java todir="${mvn.kernel.java}" filesetDir="${leg.kernel.java.src-plugin}"/>

        <macro_copy_java todir="${mvn.kernel.java}" filesetDir="${leg.foundation.java.src}"/>

        <!-- copy unit tests -->
        <macro_copy_java todir="${mvn.kernel.test}" filesetDir="${leg.kernel.java.test}"/>


    </target>

    <target name="copy-groovy-code">
        <title title="copy-groovy-code" projectname="${project.name}" projectdir="${home.dir}"/>
        <macro_copy_groovy todir="${mvn.kernel.groovy}" filesetDir="${leg.kernel.java.src}"/>
        <macro_copy_groovy todir="${mvn.kernel.groovy}" filesetDir="${leg.kernel.java.src-plugin}"/>

    </target>

    <target name="copy-resource">
        <title title="copy-resource" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy resources</description>
        <macro_copy_resource todir="${mvn.kernel.resources}" filesetDir="${leg.kernel.java.src}"/>
        <macro_copy_resource todir="${mvn.kernel.resources}" filesetDir="${leg.kernel.java.src-config}"/>
    </target>

    <target name="copy-velocity-template">
        <title title="copy-velocity-template" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy velocity templates</description>
        <macro_copy_resource todir="${mvn.kernel.templates}" filesetDir="${leg.templates.src}"/>
    </target>

    <target name="copy-config">
        <title title="copy-config" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy kernel config</description>
        <macro_copy_resource todir="${mvn.kernel.config}" filesetDir="${leg.kernel.config}"/>
        <macro_copy_resource todir="${mvn.kernel.config-demo}" filesetDir="${leg.kernel.config-test}"/>
        <macro_copy_resource todir="${mvn.kernel.config-test}" filesetDir="${leg.kernel.config-test}"/>
    </target>

    <!-- ===================================================================== -->
    <!-- specific macros definition -->
    <!-- ===================================================================== -->
    <macrodef name="macro_compile">
        <attribute name="debug"/>
        <attribute name="optimize"/>
        <sequential>
            <javac debug="@{debug}" deprecation="false" destdir="${classes.dir}"
                   optimize="@{optimize}" nowarn="false">
                <classpath refid="compile.classpath"/>
                <src path="${src.dir}"/>
                <src path="${src-plugin.dir}"/>
                <src path="${src-patch.dir}"/>
                <include name="**/*.java"/>
            </javac>
        </sequential>
    </macrodef>


    <macrodef name="macro_copy_java">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <echo>* copy @{filesetDir} to @{todir}</echo>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.java"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>
    <macrodef name="macro_copy_exclude_java">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <attribute name="exclusion"/>
        <sequential>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.java"/>
                    <exclude name="@{exclusion}" />
                </fileset>
            </copy>
        </sequential>
    </macrodef>
    <macrodef name="macro_copy_groovy">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.groovy"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>
    <macrodef name="macro_copy_resource">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <title title="copy-macro_copy_resource" projectname="${project.name}" projectdir="${home.dir}"/>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.xml"/>
                    <include name="**/*.xsd"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.vm"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="macro_copy_template">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <copy todir="@{todir}" overwrite="true">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.java"/>
                    <include name="**/*.groovy"/>
                </fileset>
                <filterset>
                    <filter token='version' value='${project.version}'/>
                    <filter token='build.time' value='${build.time}'/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="macro_copy_code">
        <attribute name="todir"/>
        <attribute name="filesetDir"/>
        <sequential>
            <mkdir dir="@{filesetDir}"/>
            <copy todir="@{todir}">
                <fileset dir="@{filesetDir}">
                    <include name="**/*.java"/>
                    <include name="**/*.groovy"/>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="macro_copy_for_mvn">
        <attribute name="todir"/>
        <attribute name="fromdir"/>
        <sequential>
            <copy todir="@{todir}" overwrite="true">
                <fileset dir="@{fromdir}">
                    <include name="**/*.*"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="macro_archive">
        <attribute name="compress"/>
        <attribute name="destdir"/>
        <attribute name="destfile"/>
        <attribute name="classesdir"/>
        <sequential>
            <jar compress="@{compress}" destfile="@{destdir}/@{destfile}">
                <fileset dir="@{classesdir}">
                    <include name="**/*.*"/>
                </fileset>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="title">
        <attribute name="title"/>
        <attribute name="projectname"/>
        <attribute name="projectdir"/>
        <sequential>
            <echo>***************************</echo>
            <echo>* task @{title}</echo>
            <echo>* on project @{projectname}</echo>
            <echo>***************************</echo>
        </sequential>
    </macrodef>

    <!-- ===================================================================== -->
    <!-- TEST definitions -->
    <!-- ===================================================================== -->

    <target name="test" depends="compile-test" description="Run JUnit test">
        <mkdir dir="${reports.tests}"/>
        <junit fork="yes" haltonerror="false" haltonfailure="false" printsummary="true">
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${reports.tests}">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                    <exclude name="**/TechnologyCatalogUtilsTest.java"/>
                </fileset>
            </batchtest>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="compile.test.classpath"/>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${config.dir}"/>
                <pathelement path="${testclasses.dir}"/>
            </classpath>
        </junit>
    </target>

    <!-- ===================================================================== -->
    <!-- target definitions -->
    <!-- ===================================================================== -->

    <target name="compileGroovy">
        <taskdef name="groovyc"
                 classname="org.codehaus.groovy.ant.Groovyc"
                 classpath="${lib.dir}/groovy-all-1.8.0.jar"/>
        <mkdir dir="${classes.dir}"/>
        <groovyc destdir="${classes.dir}">
            <src path="${src.dir}"/>
            <src path="${src-plugin.dir}"/>
            <src path="${src-patch.dir}"/>
            <classpath refid="compile.classpath"/>
            <classpath>
                <pathelement path="${classes.dir}"/>
            </classpath>
            <javac debug="on" deprecation="true"/>
        </groovyc>
    </target>


    <!-- target test
    <target name="test">
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="junit.class.path" />
            <classpath>
                <pathelement location="${build.test.dir}"/>
              </classpath>
            <formatter type="xml" />
            <batchtest todir="${test.report.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>
    -->
    <!-- target prepare -->
    <target name="prepare">
        <title title="TASK prepare" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Creates the directories necessary for building the business</description>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <!-- target compile -->
    <target name="compile" depends="prepare">
        <title title="TASK compile" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Compile ${project.name} project</description>
        <macro_compile debug="true" optimize="false"/>
    </target>

    <!-- target compile test -->
    <target name="compile-test" depends="compileGroovy">
        <title title="TASK compile test" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Compile test of ${project.name} project</description>
        <macro_compile_test debug="true" optimize="false"/>
    </target>

    <!-- target template -->
    <target name="template">
        <title title="TASK template" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy and apply token filter on kernel core properties</description>
        <macro_copy_template todir="${src.dir}" filesetDir="${src-template.dir}"/>
    </target>

    <!-- target resource -->
    <target name="resource">
        <title title="TASK resource" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy all the properties and xml files to the working directory (classes.dir).</description>
        <macro_copy_resource todir="${classes.dir}" filesetDir="${src.dir}"/>
        <!--<macro_copy_resource todir="${classes.dir}" filesetDir="${test.dir}"/>-->
    </target>

    <!-- target copy code -->
    <target name="archive-code">
        <title title="TASK copy code" projectname="${project.name}" projectdir="${home.dir}"/>
        <description>Copy all the code.</description>
        <delete dir="${release.code.dir}">
        </delete>
        <mkdir dir="${dist.dir}"/>
        <macro_copy_code filesetDir="${src.dir}" todir="${release.code.dir}"/>
        <macro_copy_code filesetDir="${src-plugin.dir}" todir="${release.code.dir}"/>
        <zip basedir="${release.code.dir}" destfile="${dist.dir}/${archive.src.name}">
        </zip>
        <delete dir="${release.code.dir}">
        </delete>
    </target>

    <!-- target archive -->


    <!-- SHIFT to maven -->
    <!-- create the maven structure for
         - foundation
         - kernel
         - template
    -->
    <target name="setup-mvn-foundation">
        <macro_copy_for_mvn fromdir="../minuteFoundation/src/main/java" todir="../mvn/minuteFoundation/src/main/java"/>
    </target>


    <property name="ant.kernel.src" value="../minuteKernel/src"/>
    <property name="ant.kernel.src.plugin" value="../minuteKernel/src-plugin"/>
    <property name="ant.kernel.src.patch" value="../minuteKernel/src-patch"/>
    <property name="ant.kernel.src.test" value="../minuteKernel/test"/>

    <property name="mvn.kernel.src.java" value="../mvn/minuteKernel/src/main/java"/>
    <property name="mvn.kernel.src.test.java" value="../mvn/minuteKernel/src/test/java"/>

    <target name="setup-mvn-kernel">
        <macro_copy_for_mvn fromdir="${ant.kernel.src}" todir="${mvn.kernel.src.java}"/>
        <macro_copy_for_mvn fromdir="${ant.kernel.src.plugin}" todir="${mvn.kernel.src.java}"/>
        <macro_copy_for_mvn fromdir="${ant.kernel.src.patch}" todir="${mvn.kernel.src.java}"/>
        <macro_copy_for_mvn fromdir="${ant.kernel.src.test}" todir="${mvn.kernel.src.test.java}"/>
    </target>

    <target name="setup-mvn">
        <antcall target="setup-mvn-foundation"></antcall>
        <antcall target="setup-mvn-kernel"></antcall>
    </target>
    <!-- build from ant -->


    <!-- copy artifacts -->


</project>
