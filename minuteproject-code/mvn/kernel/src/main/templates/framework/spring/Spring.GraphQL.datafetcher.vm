#exposeQuerySpecific()
#exposeSDDSpring()
#putImportQuerySDDBean()
package $packageName;

#if($isNotVoidInput)
import $sddInputBeanImport;
#end
import $sddDaoInterfaceImport;
import $sddOutputBeanCollectionImport;
import $sddOutputBeanImport;
import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class ${className} implements DataFetcher<List<$sddOutputBeanClass>> {

    @Autowired
    @Qualifier("$sddDaoInterfaceVariable")
    $sddDaoInterfaceClass $sddDaoInterfaceVariable;

    @Override
    public List<$sddOutputBeanClass> get(DataFetchingEnvironment dataFetchingEnvironment) {
#foreach($queryChunk in $query.getQueryChunks())
    #set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
    String $chunkName = dataFetchingEnvironment.getArgument("${chunkName}");
#end
#if($isNotVoidInput)
        $sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
#if (!$column.hasBeenDuplicated())
#if (!$column.isImplicit())
#if ($columnUtils.isDate($column))
        java.time.LocalDate ${columnVar}LocalTime = dataFetchingEnvironment.getArgument("${columnVar}");
        if (${columnVar}LocalTime!=null) {
            java.util.Date ${columnVar}Date = java.util.Date.from(${columnVar}LocalTime.atStartOfDay(java.time.ZoneId.systemDefault()).toInstant());
            ${sddInputBeanVariable}.set$columnClass (${columnVar}Date);
        }
#else
        ${sddInputBeanVariable}.set$columnClass (dataFetchingEnvironment.getArgument("${columnVar}"));
#end
#elseif ($column.isImplicit()) ##TODO check if sessionParam
#if ($column.useJwtSubject())
//Jwtsubject TODO
#elseif ($column.defaultValue)
        ${columnType} ${columnClass}_DEFAULT = "$column.defaultValue"; ##TODO with other column type
        ${sddInputBeanVariable}.set$columnClass (dataFetchingEnvironment.getArgument(${columnClass}_VALUE));
#end
#end
#end
#end
#end
        return ${sddDaoInterfaceVariable}.execute (
#daoParameters()
            ).get$sddOutputBeanClasses();
    }

}
