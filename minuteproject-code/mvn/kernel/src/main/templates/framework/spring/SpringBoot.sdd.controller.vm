#exposeQuerySpecific()
#exposeSDDSpring()
#exposeRESTSDDURLServer()
#putImportQuerySDDBean()
#addedAreas()
#set ($size = $inputBean.columns.size())
package $packageName;

$!updatedAreaImport
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.io.*;
import java.sql.*;

import java.io.IOException;
import javax.servlet.http.*;
import java.util.List;
import java.util.ArrayList;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import $sddOutputBeanCollectionImport;
#if($isNotVoidInput)
import $sddInputBeanImport;
#end
import $sddDaoInterfaceImport;

/**
 *
 * <p>Title: ${className}</p>
 *
 * <p>Description: class for ${className} service </p>
 *
 */
@RequestMapping ("$restXmlServerUrl")
@Controller
@Slf4j
@Tag(name = "${className} API", description = "${className} API")
public class ${className} {

    @Autowired
    @Qualifier("$sddDaoInterfaceVariable")
    ${sddDaoInterfaceClass} $sddDaoInterfaceVariable;

    @GetMapping(path = "/todo",
        consumes = {MediaType.APPLICATION_JSON_VALUE},
        produces = {MediaType.APPLICATION_JSON_VALUE})
    @Operation(summary = "create a Xml document from source")
    @ApiResponses(value = {
    @ApiResponse(responseCode = "200", description = "$query.info", content = {@Content(mediaType = MediaType.APPLICATION_JSON_VALUE)}),
    @ApiResponse(responseCode = "500", description = "Error while handling request", content = @Content)})
	@ResponseBody
    //public $sddOutputBeanCollectionClass execute (
    public ResponseEntity<Object> execute (
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
        @RequestParam ("$columnVar") $columnType $columnVar #if($velocityCount!=$size),
#end
#end
    ) {
#if($isNotVoidInput)
		$sddInputBeanClass $sddInputBeanVariable = new $sddInputBeanClass ();
#foreach($column in $inputBean.columns)
#putColumnParamNaming()
		${sddInputBeanVariable}.set$columnClass ($columnVar);
#end
        $sddOutputBeanCollectionClass list = ${sddDaoInterfaceVariable}.execute(${sddInputBeanVariable});
#else
        $sddOutputBeanCollectionClass list = ${sddDaoInterfaceVariable}.execute();
#end
        return ResponseEntity.ok(RestPreconditions.checkFound(xmlDoc, HttpStatus.NOT_FOUND, "No $sddOutputBeanClass found"));
    }

}
