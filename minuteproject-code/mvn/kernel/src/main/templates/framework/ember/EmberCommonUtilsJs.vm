import fetch from 'fetch';
import { hash } from 'rsvp';

async function postData(url = '', data = {}, format) {
    let options = {}
    if (format === 'JSON') {
        options.contentType = 'application/json'
        options.body = JSON.stringify(data)
    } else if (format === 'URLENCODED') {
        options.contentType = 'application/x-www-form-urlencoded'
        options.body = convertToUrlEncoding(data)
    }

    // Default options are marked with *
    const response = await fetch(url, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        credentials: 'same-origin', // include, *same-origin, omit
        headers: {
            'Content-Type': options.contentType
        },
        //redirect: 'follow', // manual, *follow, error
        //referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
        body: options.body // body data type must match "Content-Type" header
    });
    return response.json(); // parses JSON response into native JavaScript objects
}

export function getData(url) {
    return fetchIt(url, "get");
}

export function fetchData(url) {
    return getData(url);
}

export function fetchDataJwt(url, method) {
    let myjwt = JSON.parse(localStorage.getItem("ember_simple_auth-session")).authenticated.token
    return fetch(url, 
        {
            method : method,
            mode: 'cors', 
            headers : {
                'Content-type': 'application/json',
                'Authorization': 'Bearer '+myjwt,
            }
        })
        .then(function(response) {
            return response.json();
        })
        .catch(function(error) {
            throw {"session":"invalidate"};
        })
        
    ;
}

function fetchIt(url, method) {
    return fetch(url, 
        {
            method : method,
            mode: 'cors', 
            headers : {
                'Content-type': 'application/json'
            }
        })
        .then(function(response) {
            return response.json();
        })
    ;
}

export default { 
    fetchData: fetchData 
};

export function getJsonFromLocalStorage(key, adapter, dataCallback) {
    var c = window.localStorage.getItem(key);
    var result=(c && c!="undefined")?JSON.parse(c):null;
    if (!result) {
        var promise = adapter.findAll().then((data) => {
            return dataCallback(data);
        });
        var promises = {
            promise : promise
        };
        hash(promises).then(function(data) {
            result = data.promise;
            window.localStorage.setItem(key,JSON.stringify(result));
        });
    }
    return result;
}

export function webPath(input) {
    return replaceAll(input.toLowerCase(), " ", "-");
}

export function toWebPath(param) {
  if (param) {
    return param.trim().toLowerCase().split(' ').join('-');
  } else {
    return "";
  }
}
