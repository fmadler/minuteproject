#exposeEmberModelSpecific()

import JSONAPIAdapter from '@ember-data/adapter/json-api';
import {fetchData, postData} from '../utils/common-utils';
import appendQuery from 'append-query';

/*
import config from '../../config/environment';
const { host, namespace } = config.${className}DS;
const baseUrl = host+"/"+namespace;
*/

export default class ${className} extends JSONAPIAdapter {

#foreach ($package in $model.getStatementModel().getSddPackage().getQueryPackages())
    //package $package.name
#foreach ($query in $package.getQueries())
#if(!$query.isIndirection())
#if(!$queryUtils.isBackend($query))
#exposeQuerySpecific()
#set($table=$query.inputBean)
#exposeVariableEntitySpecific()
#putImportSDDInputBean()
    /* connector to $domainClassName info */
    ${tableVariableName} (params) {
#if ($query.isWrite())
        return postData(baseUrl+'/data/sdd/${sddInputBeanClass}',json${domainClassName}(params), "URLENCODED");
#else
        return fetchData(baseUrl+'/data/sdd/${sddInputBeanClass}'+filter${domainClassName}(params));
#end
    }
#foreach ($pivot in $query.pivots)
#set($pivotClass = $formatUtils.firstUpperCase($pivot.name))
#set($pivotClasses = $i18nUtils.plurialize($pivotClass))
	/* pivot $pivotClass */
	${tableVariableName}Get${pivotClasses} (params) {
		return fetchData(baseUrl+'/data/sdd/${sddInputBeanClass}/get${pivotClasses}'+filter${domainClassName}(params));
	}
#end

#end
#end
#end
#end

#foreach ($package in $model.getStatementModel().getSddPackage().getQueryPackages())
#foreach ($composite in $package.getComposites())
#exposeCompositeSpecific()
#putImportCompositeRESTSDDBean()
#set($functionName = $emberUtils.getComponentClassPath(${classVariableName}))
#set ($functionVariableName = $formatUtils.firstLowerCase(${functionName}))
	/* connector to composite $className info */
    ${functionVariableName} : function(params) {
        return fetchData(baseUrl+'/data/sdd/${sddInputRestClass}'+filter${functionVariableName}(params));
    },

#end
#end

}


#foreach ($package in $model.getStatementModel().getSddPackage().getQueryPackages())
#foreach ($composite in $package.getComposites())
#exposeCompositeSpecific()
#set($functionName = $emberUtils.getComponentClassPath(${classVariableName}))
#set ($functionVariableName = $formatUtils.firstLowerCase(${functionName}))
/* filter for composite $className entity */
function filter${functionVariableName} (filter) {
	if (filter) {
		return appendQuery("",
				json${functionVariableName} (filter),
				{ removeNull: true }
			);
	}
	return "";
}
/* $className entity as Json*/
function json${functionVariableName} (filter) {
	if (filter) {
		return {
#foreach($column in ${composite.distinctInputColumn})
#putColumnParamNaming()
				"$columnVar":filter.$columnVar #if($velocityCount!=$size),
#end
#end
				}
	}
	return {};
}

#end
#end

#foreach ($package in $model.getStatementModel().getSddPackage().getQueryPackages())
//$package.name
#foreach ($query in $package.getQueries())
#if(!$query.isIndirection())
#if (!$queryUtils.isBackend($query))
#exposeQuerySpecific()
#set($table=$query.inputBean)
#set($tableLabel=$i18nUtils.getI18nFromDBObject($table))
#set($accessUrl=$kendoUIUtils.getAccessUrl($table.name))
#exposeVariableEntitySpecific()

/* filter for $domainClassName entity */
function filter${domainClassName} (filter) {
	if (filter) {
		return appendQuery("",
				json${domainClassName} (filter),
				{ removeNull: true }
			);
	}
	return "";
}

/*  $domainClassName entity as Json */
function json${domainClassName} (filter) {
	if (filter) {
		return {
#foreach($column in $inputBean.columns)
#if (!$column.hasBeenDuplicated())
#putColumnParamNaming()
				"$columnVar":filter.$columnVar,
#end
#end
#foreach($queryChunk in $query.getQueryChunks())
#set($chunkName=$javaUtils.getJavaVariableNaming($queryChunk.name))
				"$chunkName":filter.$chunkName,	//Allowed values $queryChunk.getDistinctValues()
#end
				}
	}
	return {};
}
#end
#end
#end
#end

